generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  courses       Course[]  @relation("InstructorCourses")
  enrollments   Enrollment[]
  assignments   Assignment[]
  submissions   Submission[]
  feedback      Feedback[]
  sessions      Session[]
  children      Student[] @relation("ParentStudents")
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  avatar      String?
  bio         String?
  phone       String?
  address     String?
  institution String?
  department  String?
  settings    Json?
}

model Course {
  id          String    @id @default(uuid())
  title       String
  description String
  instructorId String
  instructor  User      @relation("InstructorCourses", fields: [instructorId], references: [id])
  enrollments Enrollment[]
  assignments Assignment[]
  sessions    Session[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Enrollment {
  id        String    @id @default(uuid())
  userId    String
  courseId  String
  user      User      @relation(fields: [userId], references: [id])
  course    Course    @relation(fields: [courseId], references: [id])
  progress  Float     @default(0)
  status    String    @default("active")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Assignment {
  id          String    @id @default(uuid())
  title       String
  description String
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id])
  dueDate     DateTime
  createdBy   String
  creator     User      @relation(fields: [createdBy], references: [id])
  submissions Submission[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Submission {
  id           String    @id @default(uuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  content      String
  grade        Float?
  feedback     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Session {
  id          String    @id @default(uuid())
  title       String
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id])
  instructorId String
  instructor  User      @relation(fields: [instructorId], references: [id])
  startTime   DateTime
  endTime     DateTime
  type        String    @default("live")
  status      String    @default("scheduled")
  recording   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Feedback {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  content     String
  rating      Int
  type        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Student {
  id          String    @id @default(uuid())
  name        String
  grade       String
  parentId    String
  parent      User      @relation("ParentStudents", fields: [parentId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  SUPER_ADMIN
  ADMIN
  INSTRUCTOR
  STUDENT
  PARENT
  AUDITOR
}